/*
-------------------------------------------
This source file is part of Ion Engine
	- A fast and lightweight 2D game engine
	- Written in C++ using OpenGL

Author:	Jan Ivar Goli
Area:	graphics/fonts
File:	IonFontManager.h
-------------------------------------------
*/

#ifndef ION_FONT_MANAGER_H
#define ION_FONT_MANAGER_H

#include <filesystem>
#include <string>
#include <string_view>
#include <tuple>
#include <utility>

#include "IonFont.h"
#include "assets/repositories/IonFontRepository.h"
#include "graphics/textures/IonTexture.h"
#include "memory/IonNonOwningPtr.h"
#include "resources/IonFileResourceManager.h"
#include "types/IonTypes.h"

#undef CreateFont

namespace ion::graphics::fonts
{
	namespace font_manager
	{
		enum class GlyphTextureType : bool
		{
			Texture2D,		//For fixed function pipeline (legacy)
			ArrayTexture2D	//For programmable pipeline only
		};


		namespace detail
		{
			std::optional<std::tuple<font::GlyphBitmapData, font::GlyphMetrices, font::GlyphMaxMetric>> prepare_font(
				const std::string &file_data, int size, int face_index,
				int character_spacing, font::FontCharacterSet character_set);

			std::optional<font::GlyphTextureHandle> load_font(
				const font::GlyphBitmapData &glyph_data,
				const font::GlyphMetrices &glyph_metrics,
				const font::GlyphMaxMetric &glyph_max_metrics,
				font::FontGlyphFilter glyph_min_filter, font::FontGlyphFilter glyph_mag_filter,
				font_manager::GlyphTextureType glyph_texture_type);
			void unload_font(const font::GlyphTextureHandle &glyph_handle) noexcept;
		} //detail
	} //font_manager


	///@brief A class that manages and stores fonts
	class FontManager final :
		public resources::FileResourceManager<Font, FontManager, assets::repositories::FontRepository>
	{
		private:
			
			font_manager::GlyphTextureType glyph_texture_type_ = font_manager::GlyphTextureType::ArrayTexture2D;

		protected:

			/**
				@name Events
				@{
			*/

			bool PrepareResource(Font &font) override;
			bool LoadResource(Font &font) override;
			bool UnloadResource(Font &font) noexcept override;


			///@brief See FileResourceManager::ResourceLoaded for more details
			void ResourceLoaded(Font &font) noexcept override;

			///@brief See FileResourceManager::ResourceFailed for more details
			void ResourceFailed(Font &font) noexcept override;

			///@}

		public:

			///@brief Default constructor
			FontManager() = default;

			///@brief Deleted copy constructor
			FontManager(const FontManager&) = delete;

			///@brief Default move constructor
			FontManager(FontManager&&) = default;

			///@brief Destructor
			~FontManager() noexcept;


			/**
				@name Operators
				@{
			*/

			///@brief Deleted copy assignment
			FontManager& operator=(const FontManager&) = delete;

			///@brief Defaul move assignment
			FontManager& operator=(FontManager&&) = default;

			///@}

			/**
				@name Ranges
				@{
			*/

			///@brief Returns a mutable range of all fonts in this manager
			///@details This can be used directly with a range-based for loop
			[[nodiscard]] inline auto Fonts() noexcept
			{
				return Resources();
			}

			///@brief Returns an immutable range of all fonts in this manager
			///@details This can be used directly with a range-based for loop
			[[nodiscard]] inline auto Fonts() const noexcept
			{
				return Resources();
			}

			///@}

			/**
				@name Modifiers
				@{
			*/

			///@brief Sets the font glyph texture type generated by this manager to the given type
			inline void FontGlyphTextureType(font_manager::GlyphTextureType glyph_texture_type) noexcept
			{
				glyph_texture_type_ = glyph_texture_type;
			}

			///@}

			/**
				@name Observers
				@{
			*/

			///@brief Returns the font glyph type generated by this manager
			[[nodiscard]] inline auto FontGlyphTextureType() const noexcept
			{
				return glyph_texture_type_;
			}

			///@}

			/**
				@name Fonts - Creating
				@{
			*/

			///@brief Creates a font with the given name, asset name, size, face index, character spacing, character set and glyph min/mag filter
			NonOwningPtr<Font> CreateFont(std::string name, std::string asset_name, int size, int face_index,
				int character_spacing, font::FontCharacterSet character_set, font::FontGlyphFilter min_filter, font::FontGlyphFilter mag_filter);

			///@brief Creates a font with the given name, asset name, size, character spacing, character set and glyph min/mag filter
			NonOwningPtr<Font> CreateFont(std::string name, std::string asset_name, int size,
				int character_spacing, font::FontCharacterSet character_set, font::FontGlyphFilter min_filter, font::FontGlyphFilter mag_filter);

			///@brief Creates a font with the given name, asset name, size, character spacing, character set and glyph filter
			NonOwningPtr<Font> CreateFont(std::string name, std::string asset_name, int size,
				int character_spacing, font::FontCharacterSet character_set, font::FontGlyphFilter filter);

			///@brief Creates a font with the given name, asset name, size, character spacing and character set
			NonOwningPtr<Font> CreateFont(std::string name, std::string asset_name, int size,
				int character_spacing, font::FontCharacterSet character_set);

			///@brief Creates a font with the given name, asset name, size and character spacing
			NonOwningPtr<Font> CreateFont(std::string name, std::string asset_name, int size,
				int character_spacing = 0);


			///@brief Creates a font as a copy of the given font
			NonOwningPtr<Font> CreateFont(const Font &font);

			///@brief Creates a font by moving the given font
			NonOwningPtr<Font> CreateFont(Font &&font);

			///@}

			/**
				@name Fonts - Retrieving
				@{
			*/

			///@brief Gets a pointer to a mutable font with the given name
			///@details Returns nullptr if font could not be found
			[[nodiscard]] NonOwningPtr<Font> GetFont(std::string_view name) noexcept;

			///@brief Gets a pointer to an immutable font with the given name
			///@details Returns nullptr if font could not be found
			[[nodiscard]] NonOwningPtr<const Font> GetFont(std::string_view name) const noexcept;

			///@}

			/**
				@name Fonts - Removing
				@{
			*/

			///@brief Clears all removable fonts from this manager
			void ClearFonts() noexcept;

			///@brief Removes a removable font from this manager
			bool RemoveFont(Font &font) noexcept;

			///@brief Removes a removable font with the given name from this manager
			bool RemoveFont(std::string_view name) noexcept;

			///@}
	};
} //ion::graphics::fonts

#endif